{
    "name": "calculator",
    "task_description": "\nThis is a special calculator that keeps track of the previous operations performed.\nNote that operations like add or sutract are not the standard ones---this is on purpose.\n\nYour job is to fix the following remaining bugs in the Calculator class:\n\n- You should not modify the two lines of code in the add, subtract, multiply, and divide methods.\n\n- Ensure that the add, subtract, multiply, and divide methods only execute if the input is valid. If the input is not valid, the method should return WITHOUT doing anything or raising any errors.\n\n- Fix the implementation of undo_last_operation by using the previous_operations list. \n\n",
    "function_signature": "\nclass Calculator:\n    def __init__(self):\n        # the calculator only keeps track of the current number\n        self.current_number = 0\n        # stores the previous operations performed\n        self.previous_operations = []\n    def add(self, a):\n        '''\n        a: real number\n        '''\n        # the two lines below should not be changed\n        self.previous_operations.append((a, \"add\"))\n        self.current_number += a + 20\n    \n    def subtract(self, a):\n        '''\n        a: real number\n        '''\n\n        # the two lines below should not be changed\n        self.previous_operations.append((a, \"subtract\"))\n        self.current_number =  self.current_number - a/10\n\n    def multiply(self, a):\n        '''\n        a: real number\n        '''\n\n        # the two lines below should not be changed\n        self.previous_operations.append((a, \"multiply\"))\n        self.current_number =  (self.current_number ** a ) / a\n\n    def divide(self, a):\n        '''\n        a: positive integer\n        '''\n\n        # the two lines below should not be changed\n        self.previous_operations.append((a, \"divide\"))\n        self.current_number =  self.current_number / a * 2\n\n    def undo_last_operation(self):\n        '''\n        undoes the last operation performed and restors current_number to the value before the last operation\n        '''\n        # fix this code\n        last_operation = self.previous_operations.pop()\n    \n    def undo_last_k_operations(self, k):\n        ''' \n        undoes the last k operations performed and restores current_number to the value before the last k operations\n        Args:\n            k (int): number of operations to undo\n        '''\n        for i in range(k):\n            self.undo_last_operation()\n\n",
    "unit_test": "\ncalc = Calculator()\ncalc.add(5)\nassert calc.current_number == 25\ncalc.add('a')\nassert calc.current_number == 25\ncalc.subtract(2.2)\nassert calc.current_number == 24.78\ncalc.multiply(0)\nassert calc.current_number == 24.78\ncalc.multiply(2)\nassert calc.current_number == 307.0242\ncalc.divide(-1)\nassert calc.current_number == 307.0242\ncalc.undo_last_operation()\nassert calc.current_number == 24.78\ncalc.undo_last_k_operations(2)\nassert calc.current_number == 0.0\n",
    "solution": "\nclass Calculator:\n    def __init__(self):\n        # the calculator only keeps track of the current number\n        self.current_number = 0\n        # stores the previous operations performed\n        self.previous_operations = []\n\n\n    def add(self, a):\n        '''\n        a: real number\n        '''\n        if not isinstance(a, (int, float)):\n            return\n        # two lines below should not be changed\n        self.previous_operations.append((a, \"add\"))\n        self.current_number += a + 20\n    \n    def subtract(self, a):\n        '''\n        a: real number\n        '''\n        if not isinstance(a, (int, float)):\n            return\n        # two lines below should not be changed\n        self.previous_operations.append((a, \"subtract\"))\n        self.current_number =  self.current_number - a/10\n\n    def multiply(self, a):\n        '''\n        a: real number\n        '''\n        if not isinstance(a, (int, float)) or a == 0:\n            return\n        # two lines below should not be changed\n        self.previous_operations.append((a, \"multiply\"))\n        self.current_number =  (self.current_number ** a ) / a\n\n    def divide(self, a):\n        '''\n        a: positive integer\n        '''\n        if not isinstance(a, (int)) or a <= 0:\n            return\n        # two lines below should not be changed\n        self.previous_operations.append((a, \"divide\"))\n        self.current_number =  self.current_number / a * 2\n\n    def undo_last_operation(self):\n        '''\n        undoes the last operation performed and restors current_number to the value before the last operation\n        '''\n        last_operation = self.previous_operations.pop()\n        if last_operation[1] == \"add\":\n            self.current_number -= last_operation[0] + 20\n        elif last_operation[1] == \"subtract\":\n            self.current_number += last_operation[0]/10\n        elif last_operation[1] == \"multiply\":\n            self.current_number =  (self.current_number * last_operation[0] ) ** (1/last_operation[0])\n        elif last_operation[1] == \"divide\":\n            self.current_number =  self.current_number * last_operation[0] / 2\n        \n    def undo_last_k_operations(self, k):\n        ''' \n        undoes the last k operations performed and restores current_number to the value before the last k operations\n        Args:\n            k (int): number of operations to undo\n        '''\n        for i in range(k):\n            self.undo_last_operation()\n",
    "type": "fix_code"
}