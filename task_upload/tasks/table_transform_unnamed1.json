{
    "name": "table_transform_unnamed1",
    "task_description": "\n+----+--------+--------+---------+--------+--------+\n|    |   col1 |   col2 |    col3 |   col4 |   col5 |\n|----+--------+--------+---------+--------+--------|\n|  0 |      6 |      4 | 0.56713 |     10 |      4 |\n|  1 |      1 |      6 | 2.72656 |      9 |      6 |\n|  2 |      4 |      3 | 4.77665 |     10 |      1 |\n|  3 |      4 |      5 | 8.12169 |      5 |      3 |\n|  4 |      8 |      8 | 4.79977 |      4 |      4 |\n|  5 |     10 |      7 | 3.92785 |      1 |      9 |\n+----+--------+--------+---------+--------+--------+\n\nThis is a pandas dataframe provided to you above as input.\n\nYou need to transform it exactly to the following output dataframe:\n\n+----+--------+--------+---------+--------+\n|    |   col1 |   col2 |    col3 |   col4 |\n|----+--------+--------+---------+--------|\n|  0 |     60 |      0 | 0.56713 |   1000 |\n|  1 |      9 |      2 | 2.72656 |    900 |\n|  2 |     40 |      4 | 4.77665 |   1000 |\n|  3 |     20 |      8 | 8.12169 |    500 |\n|  4 |     32 |      4 | 4.79977 |    400 |\n|  5 |     10 |      3 | 3.92785 |    100 |\n+----+--------+--------+---------+--------+\n\nYour code should be placed inside a function called transform_df that takes as input a dataframe and returns the transformed dataframe. There are patterns that you have to discover.\n",
    "function_signature": "\nimport pandas as pd\nfrom io import StringIO\n\n# Original dataset\ndata = '''\ncol1,col2,col3,col4,col5\n6,4,0.5671297731744318,10,4\n1,6,2.726562945801132,9,6\n4,3,4.776651173213499,10,1\n4,5,8.121687287754932,5,3\n8,8,4.799771723750573,4,4\n10,7,3.9278479610082973,1,9\n'''\n\n# Read the dataset into a DataFrame\ndf = pd.read_csv(StringIO(data))\n\ndef transform_df(df):\n    # Your code here\n\nprint(transform_df(df))\n",
    "unit_test": "import numpy as np\ndata = '''\ncol1,col2,col3,col4,col5\n6,4,0.5671297731744318,10,4\n1,6,2.726562945801132,9,6\n4,3,4.776651173213499,10,1\n4,5,8.121687287754932,5,3\n8,8,4.799771723750573,4,4\n10,7,3.9278479610082973,1,9\n'''\ndf = pd.read_csv(StringIO(data))\nnew_data_testing = '''\ncol1,col2,col3,col4\n60,0,0.5671297731744318,1000\n9,2,2.726562945801132,900\n40,4,4.776651173213499,1000\n20,8,8.121687287754932,500\n32,4,4.799771723750573,400\n10,3,3.9278479610082973,100\n'''\ndef evaluate_correctness(target_df, input_df):\n    # drop index column from both\n    target_df.reset_index(drop=True, inplace=True)\n    input_df.reset_index(drop=True, inplace=True)\n    score = 0\n    for col in target_df.columns:\n        if col not in input_df.columns:\n            score -=1 \n        else:\n            if np.all(target_df[col] != input_df[col]):\n                score-=1\n    for col in input_df.columns:\n        if col not in target_df.columns:\n            score -=1\n    return score\nnew_data_df_testing = pd.read_csv(StringIO(new_data_testing))\nassert evaluate_correctness(new_data_df_testing, transform_df(df)) == 0\n",
    "solution": "\nimport pandas as pd\nfrom io import StringIO\ndef transform_df(df):\n    df_transformed = df.copy()\n\n    # col1 as the multiplication of col1 and col4\n    df_transformed['col1'] = df['col1'] * df['col4']\n\n    # col2 as col3 truncated to the nearest integer\n    df_transformed['col2'] = df['col3'].astype(int)\n\n    # col4 multiplied by 100\n    df_transformed['col4'] = df['col4'] * 100\n\n    # Remove col5\n    df_transformed.drop('col5', axis=1, inplace=True)\n    return df_transformed\n",
    "type": "data_manip"
}