{
    "name": "login_authenticator",
    "task_description": "\nYour goal is to implement the LoginAuthenticator class. This class will be used to authenticate users of a system. \n\nYou will implement the following methods in the LoginAuthenticator class:\n\n_hash_password (Private Method):\n\nPurpose: To create a hash of a given password.\nParameters: password (string).\nProcess: use any hashing tehnique you like\nReturn: The hashed password \n\nadd_user Method:\n\nPurpose: To add a new user to the system with a username and a password.\nParameters: username (string), password (string).\nProcess:\n- Check if the username already exists in self.user_credentials.\n- If it does, return False to indicate the username is already taken.\n- If not, hash the password using _hash_password method and store the username and hashed password in self.user_credentials.\nReturn: True if the user was successfully added, otherwise False.\n\nremove_user Method:\n\nPurpose: To remove a user from the system.\nParameters: username (string).\nProcess:\n- Check if the username exists in self.user_credentials.\n- If it does, delete the username entry from self.user_credentials.\nReturn: True if the user was successfully removed, otherwise False.\n\n\nchange_password Method:\n\nPurpose: To change a user's password.\nParameters: username (string), old_password (string), new_password (string).\nProcess:\n- First, authenticate the user using the authenticate_user method with username and old_password.\n- If authentication is successful, hash the new_password and update the self.user_credentials with the new hashed password.\nReturn: True if the password was successfully changed, otherwise False.\n",
    "function_signature": "\nclass LoginAuthenticator:\n    def __init__(self):\n        # DO NOT CHANGE\n        self.user_credentials = {}  # dictionary for username: hashed_password\n\n    def _hash_password(self, password):\n        # WRITE CODE HERE\n        return\n\n    def add_user(self, username, password):\n        # WRITE CODE HERE\n        return\n\n    def authenticate_user(self, username, password):\n        # DO NOT CHANGE\n        #Checks if the given username and password are valid\n        if username not in self.user_credentials:\n            return False\n        return self.user_credentials[username] == self._hash_password(password)\n\n    def remove_user(self, username):\n        # WRITE CODE HERE\n        return\n\n    def change_password(self, username, old_password, new_password):\n        # WRITE CODE HERE\n        return\n",
    "unit_test": "\n# Assuming the LoginAuthenticator class is defined as previously provided\n\n# Create an instance of the LoginAuthenticator\nauthenticator = LoginAuthenticator()\n\n# Test adding new users\nassert authenticator.add_user(\"user1\", \"password1\") == True  # Should succeed\nassert authenticator.add_user(\"user2\", \"password2\") == True  # Should succeed\nassert authenticator.add_user(\"user1\", \"new_password\") == False  # Should fail, user1 already exists\n\n# Test authenticating users\nassert authenticator.authenticate_user(\"user1\", \"password1\") == True  # Correct credentials\nassert authenticator.authenticate_user(\"user1\", \"wrong_password\") == False  # Wrong password\nassert authenticator.authenticate_user(\"user3\", \"password\") == False  # Non-existent user\n\n# Test removing users\nassert authenticator.remove_user(\"user1\") == True  # Should succeed in removing user1\nassert authenticator.remove_user(\"user1\") == False  # user1 no longer exists\nassert authenticator.remove_user(\"user3\") == False  # user3 does not exist\n\n# Test changing passwords\nassert authenticator.change_password(\"user2\", \"password2\", \"newpass2\") == True  # Should succeed\nassert authenticator.authenticate_user(\"user2\", \"newpass2\") == True  # New password should work\nassert authenticator.change_password(\"user2\", \"password2\", \"anothernewpass\") == False  # Old password no longer valid\nassert authenticator.change_password(\"nonexistent_user\", \"pass\", \"newpass\") == False  # Non-existent user\n\nprint(\"All tests passed!\")\n",
    "solution": "\nimport hashlib\n\nclass LoginAuthenticator:\n    def __init__(self):\n        self.user_credentials = {}  # dictionary for username: hashed_password\n\n    def _hash_password(self, password):\n        #Helper method to hash a password.\n        return hashlib.sha256(password.encode()).hexdigest()\n\n    def add_user(self, username, password):\n        #Adds a new user if the username doesn't already exist.\n        if username in self.user_credentials:\n            return False  # Username already exists\n        self.user_credentials[username] = self._hash_password(password)\n        return True\n\n    def authenticate_user(self, username, password):\n        #Checks if the given username and password are valid.\n        if username not in self.user_credentials:\n            return False\n        return self.user_credentials[username] == self._hash_password(password)\n\n    def remove_user(self, username):\n        #Removes a user from the system.\n        if username in self.user_credentials:\n            del self.user_credentials[username]\n            return True\n        return False\n\n    def change_password(self, username, old_password, new_password):\n        #Changes the password for a user if the old password is correct.\n        if self.authenticate_user(username, old_password):\n            self.user_credentials[username] = self._hash_password(new_password)\n            return True\n        return False\n",
    "type": "lengthy_code"
}